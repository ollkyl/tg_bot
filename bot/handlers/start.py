from aiogram import types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.keyboards import main_menu, inline_kb
from db import add_subscription

period_translations = {
    "monthly": "–ø–æ–º–µ—Å—è—á–Ω–æ",
    "daily": "–ø–æ—Å—É—Ç–æ—á–Ω–æ",
    "yearly": "–æ—Ç –≥–æ–¥–∞",
}

furnishing_translations = {
    "furnished": "–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
    "unfurnished": "–ù–µ–º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
}

rooms_translation = {
    "—Å—Ç—É–¥–∏—è": "100",
    "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": "1",
    "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": "2",
    "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": "3",
    "4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": "4",
}

subscription_translations = {"day": "–¥–µ–Ω—å", "week": "–Ω–µ–¥–µ–ª—é", "month": "–º–µ—Å—è—Ü"}


async def update_selected_message(callback: types.CallbackQuery, state: FSMContext, bot):
    data = await state.get_data()
    selected_text = get_selected_text(data)
    selected_message_id = data.get("selected_message_id")
    try:
        if selected_message_id:
            await bot.edit_message_text(
                text=selected_text,
                chat_id=callback.message.chat.id,
                message_id=selected_message_id,
                parse_mode="HTML",
            )
        else:
            params_message = await callback.message.answer(selected_text, parse_mode="HTML")
            await state.update_data(selected_message_id=params_message.message_id)
    except Exception:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")


def get_selected_text(data):
    districts = ", ".join(data.get("districts", [])) or "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    rooms = ", ".join(data.get("count_of_rooms", [])) or "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    min_price = data.get("min_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    max_price = data.get("max_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    period = (
        ", ".join(period_translations.get(p, p) for p in data.get("periods", [])) or "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    )
    furnishing = (
        ", ".join(furnishing_translations.get(f, f) for f in data.get("furnishing", []))
        or "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    )
    return (
        f"–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{districts}</b>\n"
        f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price} - {max_price} AED –≤ –º–µ—Å—è—Ü</b>\n"
        f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{rooms}</b>\n"
        f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>\n"
        f"<code>ü™ë –ú–µ–±–ª–∏—Ä–æ–≤–∫–∞:</code> <b>{furnishing}</b>"
    )


def register_start(dp, bot):
    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        user_name = message.from_user.username
        await state.update_data(user_id=user_id, user_name=user_name)
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É.\n\n"
            "‚úÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
            reply_markup=main_menu,
        )
        menu_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)
        selected_text = get_selected_text({})
        params_message = await message.answer(selected_text, parse_mode="HTML")
        await state.update_data(
            menu_message_id=menu_message.message_id,
            selected_message_id=params_message.message_id,
            selected_text=selected_text,
        )

    @dp.message(Command("cancel"))
    async def cmd_cancel(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    @dp.message(Command("weawer"))
    async def cmd_weawer(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        await add_subscription(user_id=user_id, subscription_type="day")
        await state.update_data(subscription_type="day", subscription_active=True)
        await message.answer(
            f"–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ {subscription_translations['day']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=inline_kb,
        )

    @dp.message(F.text == "–í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é")
    async def call_menu(message: types.Message, state: FSMContext):
        data = await state.get_data()

        selected_message_id = data.get("selected_message_id")
        subscription_message_id = data.get("subscription_message_id")
        invoice_message_id = data.get("invoice_message_id")
        finish_message_id = data.get("finish_message_id")

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        if selected_message_id:
            try:
                await message.bot.delete_message(
                    chat_id=message.chat.id, message_id=selected_message_id
                )
            except Exception:
                pass

        # –£–¥–∞–ª—è–µ–º –ø–æ–±–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_id in [subscription_message_id, invoice_message_id, finish_message_id]:
            if msg_id:
                try:
                    await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
                except Exception:
                    pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é (–≤–∞–∂–Ω–æ!)
        menu_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        selected_text = get_selected_text(data)
        params_message = await message.answer(selected_text, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            menu_message_id=menu_message.message_id,
            selected_message_id=params_message.message_id,
            subscription_message_id=None,
            invoice_message_id=None,
            finish_message_id=None,
        )
