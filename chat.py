from telethon import TelegramClient, events
import cohere
from dotenv import dotenv_values
import json
from prompt import prompt_1

env_values = dotenv_values(".env")

api_id = int(env_values.get("API_ID"))
api_hash = env_values.get("API_HASH")
cohere_api_key = env_values.get("COHERE_API_KEY")
apartments_file = env_values.get("APARTMENTS_FILE", "apartments.json")

try:
    with open(apartments_file, "r", encoding="utf-8") as f:
        apartments = json.load(f)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∫–≤–∞—Ä—Ç–∏—Ä: {e}")
    apartments = []

apartments_str = "\n".join(
    [
        f" {apt['name']}\n {apt['address']}\n {apt['price']}\n  {apt['info']}\n "
        for apt in apartments
    ]
)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Cohere
co = cohere.ClientV2(api_key=cohere_api_key)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient("session_name", api_id, api_hash)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
dialogues = {}


async def send_apartment_photo(user_id, apartment_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ."""
    for apartment in apartments:
        if apartment["id"] == apartment_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_file(user_id, apartment["photo"])


def generate_response(user_id, user_message):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in dialogues:
            dialogues[user_id] = []

        dialogues[user_id].append({"role": "user", "content": user_message})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
        dialogues[user_id] = dialogues[user_id][-20:]

        # –ó–∞–ø—Ä–æ—Å –∫ Cohere —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        response = co.chat(
            model="command-r7b-12-2024",
            messages=dialogues[user_id],  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            max_tokens=200,  # –î–∞–µ–º –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        )

        print("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Cohere:", response)  # üëÄ –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç API

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        if response.message and response.message.content:
            bot_reply = response.message.content[0].text.strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            dialogues[user_id].append({"role": "assistant", "content": bot_reply})

            return bot_reply
        else:
            return "–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"


@client.on(events.NewMessage(incoming=True))
async def handle_new_message(event):
    user_message = event.message.message
    sender = await event.get_sender()
    user_id = sender.id  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    if not event.is_private:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return
    global prompt_1
    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.username}: {user_message}")
    prompt_1 = (
        prompt_1
        + f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä:{apartments_str}"
        + f" –∫–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç :{user_message}"
    )

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if user_id not in dialogues:
        response = generate_response(user_id, prompt_1)
        entity = await client.get_entity(user_id)
        await client.send_message(entity, "–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∫–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    else:
        response = generate_response(user_id, user_message)
        entity = await client.get_entity(user_id)

        # if "11" in response:  #
        #     await client.send_message(entity, "–∫–∞–∫–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

        if "33" in response:  # apartmrnts
            for ap in apartments:
                formatted_text = (
                    f"‚≠êÔ∏è –°–¥–∞–µ—Ç—Å—è {ap['name']}!\n\n"
                    f"üìç {ap['address']}\n"
                    f"üíµ –¶–µ–Ω–∞: {ap['price']}\n"
                    f"‚ÑπÔ∏è {ap['info']}\n"
                )
                await client.send_message(entity, formatted_text)

        if "34" in response:  # apartmrnts
            response = response[2:]  # —É–±—Ä–∞—Ç—å 2 –ø–µ—Ä–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
            id = int(response.strip())
            for ap in apartments:
                if ap["id"] == id:
                    formatted_text = (
                        f"‚≠êÔ∏è –°–¥–∞–µ—Ç—Å—è {ap['name']}!\n\n"
                        f"üìç {ap['address']}\n"
                        f"üíµ –¶–µ–Ω–∞: {ap['price']}\n"
                        f"‚ÑπÔ∏è {ap['info']}\n"
                    )
            await send_apartment_photo(user_id, id)
            await client.send_message(entity, f"{formatted_text}")

        if "36" in response:
            await client.send_message(
                entity, "–ú–Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º)"
            )
            await client.send_message(
                "me",
                f"( –∫–ª–∏–µ–Ω—Ç @{entity.username} –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞)",
            )
        if "35" in response:
            await client.send_message(entity, "–û—Ç–ª–∏—á–Ω–æ, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ?")
            await client.send_message(
                "me", f"( –∫–ª–∏–µ–Ω—Ç @{entity.username} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"
            )

    print(f"–∫–æ–¥ –ø–æ–ª—É—á–µ–Ω: {response}")


async def main():
    await client.start()
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    me = await client.get_me()
    print(f"–Ø –≤–æ—à–µ–ª –∫–∞–∫: {me.first_name} ({me.username})")

    await client.run_until_disconnected()


# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
with client:
    client.loop.run_until_complete(main())
