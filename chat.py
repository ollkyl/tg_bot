from telethon import TelegramClient, events
import cohere
from dotenv import dotenv_values

env_values = dotenv_values(".env")

api_id = int(env_values.get("API_ID"))
api_hash = env_values.get("API_HASH")
cohere_api_key = env_values.get("COHERE_API_KEY")
apartments = env_values.get("APARTMENTS")
print(apartments)


# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Cohere
co = cohere.ClientV2(api_key=cohere_api_key)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient("session_name", api_id, api_hash)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
dialogues = {}


def generate_response(user_id, user_message):
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in dialogues:
            dialogues[user_id] = []

        dialogues[user_id].append({"role": "user", "content": user_message})

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API)
        dialogues[user_id] = dialogues[user_id][-20:]

        # –ó–∞–ø—Ä–æ—Å –∫ Cohere —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        response = co.chat(
            model="command-r",
            messages=dialogues[user_id],  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
            max_tokens=200,  # –î–∞–µ–º –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        )

        print("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Cohere:", response)  # üëÄ –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç API

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        if response.message and response.message.content:
            bot_reply = response.message.content[0].text.strip()
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            dialogues[user_id].append({"role": "assistant", "content": bot_reply})

            return bot_reply
        else:
            return "–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"


@client.on(events.NewMessage(incoming=True))
async def handle_new_message(event):
    user_message = event.message.message
    sender = await event.get_sender()
    user_id = sender.id  # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    if not event.is_private:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        return

    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.username}: {user_message}")

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ, –¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if user_id not in dialogues:
        prompt = (
            "–¢—ã —Ä–∏–µ–ª—Ç–æ—Ä. –¢–µ–±–µ –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–µ–ª —Ç–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ. "
            f"–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –æ –∫–∞–∫–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–¥–µ—Ç —Ä–µ—á—å. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä:{apartments} "
            "–ë–æ–ª—å—à–µ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–µ—Ç. –¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–Ω–∞. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö. "
            "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞, –Ω–∞–ø–∏—à–∏: "
            "'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É —Ç–æ—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –æ—Ç–ø–∏—à—É—Å—å –≤–∞–º, –∫–∞–∫ —É—Ç–æ—á–Ω—é —É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞.' "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞ –∫—Ä–∞—Ç–∫–æ, –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –º–∞–∫—Å–∏–º—É–º —Ç—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
            "–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ç–≤–µ—Ç—å –µ–º—É '–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏–º—Å—è –æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ. –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç?'"
            f"–ö–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç: {user_message}. –û—Ç–≤–µ—Ç—å –µ–º—É."
        )
        response = generate_response(user_id, prompt)

    else:
        response = generate_response(user_id, user_message)
        entity = await client.get_entity(user_id)

        if "—É—Ç–æ—á–Ω—é —É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞" in response:
            await client.send_message(
                "me",
                f"( –∫–ª–∏–µ–Ω—Ç @{entity.username} –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞)",
            )
        if "–≤–∞–º —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç?" in response or "–≤–∞–º —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç?" in response:
            await client.send_message(
                "me", f"( –∫–ª–∏–µ–Ω—Ç @{entity.username} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä"
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await event.reply(response)
    print(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")


async def main():
    await client.start()
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    me = await client.get_me()
    print(f"–Ø –≤–æ—à–µ–ª –∫–∞–∫: {me.first_name} ({me.username})")

    await client.run_until_disconnected()


# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
with client:
    client.loop.run_until_complete(main())
