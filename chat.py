from telethon import TelegramClient
from telethon import events
import cohere
from dotenv import dotenv_values

env_values = dotenv_values(".env")

api_id = int(env_values.get("API_ID"))
api_hash = env_values.get("API_HASH")
phone = env_values.get("PHONE")
cohere_api_key = env_values.get("COHERE_API_KEY")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Cohere
co = cohere.ClientV2(api_key=cohere_api_key)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram
client = TelegramClient("session_name", api_id, api_hash)


def generate_response(prompt):
    try:
        response = co.chat(
            model="command-r",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        )

        print("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç Cohere:", response)  # üëÄ –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç API

        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç
        if response.message and response.message.content:
            return response.message.content[0].text.strip()
        else:
            return "–û—à–∏–±–∫–∞: API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}"


@client.on(events.NewMessage(incoming=True))
async def handle_new_message(event):
    user_message = event.message.message
    sender = await event.get_sender()
    print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender.username}: {user_message}")

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä
    if "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä" in user_message.lower():
        await event.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")
    elif "–¥–∞—Ç–∞" in user_message.lower() and "–≤—Ä–µ–º—è" in user_message.lower():
        await event.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä!")
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Cohere
        prompt = f"–¢—ã —Ä–∏–µ–ª—Ç–æ—Ä. –¢–µ–±–µ –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–µ–ª —Ç–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –∫—Ä–∞—Ä—Ç–∏—Ä–µ –Ω–∞ —Ü–µ—Ä–µ—Ç–µ–ª–∏, –∑–∞ 350 –¥–æ–ª–ª–∞—Ä–æ–≤. –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –µ—Å—Ç—å, —Å–ø–∞–ª—å–Ω—è –æ–¥–Ω–∞, –∫—É—Ö–Ω—è –æ—Ç–¥–µ–ª—å–Ω–æ. –≤–∏–¥ –≤–æ –¥–≤–æ—Ä,—ç—Ç–∞–∂ –≤—Ç–æ—Ä–æ–π. –í–æ–∑–º–æ–∂–Ω–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ. –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞. –ö–ª–∏–µ–Ω—Ç –ø–∏—à–µ—Ç: {user_message}. –û—Ç–≤–µ—Ç—å –µ–º—É."
        response = generate_response(prompt)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await event.reply(response)
        print(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response}")


async def main():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
    await client.start()
    print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
    me = await client.get_me()
    print(f"–Ø –≤–æ—à–µ–ª –∫–∞–∫: {me.first_name} ({me.username})")

    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
    await client.run_until_disconnected()


# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
with client:
    client.loop.run_until_complete(main())
