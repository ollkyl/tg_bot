from aiogram import Bot
from aiogram.types import InputMediaPhoto, InputMediaVideo
import logging
from db import async_session, Apartment
import requests
from dotenv import dotenv_values
from db import find_matching_clients

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
env_values = dotenv_values(".env")
BOT_TOKEN = env_values.get("API_TOKEN")
bot = Bot(token=BOT_TOKEN)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Algolia
ALGOLIA_API_KEY = env_values.get("ALGOLIA_API_KEY")
ALGOLIA_APP_ID = env_values.get("ALGOLIA_APP_ID")
headers = {
    "X-Algolia-API-Key": ALGOLIA_API_KEY,
    "X-Algolia-Application-Id": ALGOLIA_APP_ID,
    "Content-Type": "application/json",
}


async def get_photo_url(object_id):
    """–ü–æ–ª—É—á–∞–µ—Ç URL —Ñ–æ—Ç–æ –ø–æ object_id –∏–∑ Algolia."""
    if not object_id:
        return None
    detail_url = f"https://LL8IZ711CS-dsn.algolia.net/1/indexes/bayut-production-ads-en/{object_id}"
    try:
        response = requests.get(detail_url, headers=headers, timeout=10)
        if response.status_code == 200:
            detail_hit = response.json()
            return detail_hit.get("coverPhoto", {}).get("url")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è object_id {object_id}: {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ URL —Ñ–æ—Ç–æ: {e}")
        return None


async def send_apartment_notification(apartment_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–µ –∏–∑ –ë–î."""
    async with async_session() as session:
        result = await session.execute(select(Apartment).where(Apartment.id == apartment_id))
        apt = result.scalars().first()
        if not apt:
            logging.error(f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å ID {apartment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–æ—Ç–æ
        photo_url = await get_photo_url(apt.object_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üè† {apt.name}\n"
            f"üí∞ –¶–µ–Ω–∞: {apt.price} AED\n"
            f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç—ã: {apt.rooms}\n"
            f"üìç –†–∞–π–æ–Ω: {apt.district}\n"
            f"‚åõ –ü–µ—Ä–∏–æ–¥: {apt.period}\n"
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ: {apt.info or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: @{apt.owner.replace(' ', '_')}"
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        channel_id = "@apartDubaiApart"
        try:
            if photo_url:
                await bot.send_photo(chat_id=channel_id, photo=photo_url, caption=message)
            else:
                await bot.send_message(chat_id=channel_id, text=message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
        matching_clients = await find_matching_clients(apt)
        if matching_clients:
            sent_usernames = []
            for user_id, user_name in matching_clients:
                try:
                    if user_id is not None:
                        if user_name:
                            sent_usernames.append(user_name)
                        else:
                            sent_usernames.append("–ë–µ–∑ –∏–º–µ–Ω–∏")
                        if photo_url:
                            await bot.send_photo(chat_id=user_id, photo=photo_url, caption=message)
                        else:
                            await bot.send_message(chat_id=user_id, text=message)
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if sent_usernames:
                await bot.send_message(
                    chat_id=channel_id, text=f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {', '.join(sent_usernames)}"
                )
        else:
            logging.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
