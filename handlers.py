from aiogram import F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import AiogramError

from keyboards import (
    inline_kb,
    main_menu,
    get_min_price_keyboard,
    get_max_price_keyboard,
    get_count_of_rooms_keyboard,
    get_period_keyboard,
    get_district_keyboard,
    rooms,
    districts,
    finish_messages,
)
from states import Selection, ApartmentForm, BroadcastState
from db import add_client, add_apartment, get_all_users

period_translations = {
    "monthly": "–ø–æ–º–µ—Å—è—á–Ω–æ",
    "daily": "–ø–æ—Å—É—Ç–æ—á–Ω–æ",
    "yearly": "–æ—Ç –≥–æ–¥–∞",
}


def register_handlers(dp, bot, ADMIN_ID):
    @dp.message(Command("cancel"))
    async def cmd_cancel(message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    @dp.message(Command("broadcast"))
    async def cmd_broadcast(message: types.Message, state: FSMContext):
        if message.from_user.id != ADMIN_ID:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        await state.set_state(BroadcastState.waiting_for_message)

    @dp.message(StateFilter(BroadcastState.waiting_for_message))
    async def handle_broadcast_message(message: types.Message, state: FSMContext):
        broadcast_message = message.text
        users = await get_all_users()
        for user_id in users:
            try:
                await bot.send_message(user_id, broadcast_message)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                continue
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.finish()

    @dp.message(Command("start"))
    async def send_welcome(message: types.Message, state: FSMContext):
        await state.clear()
        user_id = message.from_user.id
        user_name = message.from_user.username
        await state.update_data(user_id=user_id, user_name=user_name)
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É.\n\n‚úÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. \n\nüÜï –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üöÄ",
            reply_markup=main_menu,
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)

    @dp.message(F.text == "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
    async def restart_bot(message: types.Message, state: FSMContext):
        await state.clear()
        await send_welcome(message, state)

    @dp.callback_query(F.data == "button_price")
    async def choose_min_price(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—É \n(AED –≤ –º–µ—Å—è—Ü):",
            reply_markup=get_min_price_keyboard(),
        )
        await state.set_state(Selection.choosing_min_price)

    @dp.callback_query(F.data.startswith("min_"))
    async def choose_max_price(callback: types.CallbackQuery, state: FSMContext):
        min_price = int(callback.data.split("_")[1])
        await state.update_data(min_price=min_price)
        await callback.message.edit_text(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞: {min_price}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—É:",
            reply_markup=get_max_price_keyboard(min_price),
        )
        await state.set_state(Selection.choosing_max_price)

    @dp.callback_query(F.data.startswith("max_"))
    async def confirm_price(callback: types.CallbackQuery, state: FSMContext):
        max_price = int(callback.data.split("_")[1])
        await state.update_data(max_price=max_price)
        await return_to_main_menu(callback, state)

    @dp.callback_query(F.data == "button_rooms")
    async def choosing_count_of_rooms(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        selected_rooms = data.get("count_of_rooms", [])  # ‚úÖ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
            reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms=selected_rooms),
        )
        await state.set_state(Selection.choosing_count_of_rooms)

    @dp.callback_query(F.data.in_(rooms))
    async def confirm_room_choice(callback: types.CallbackQuery, state: FSMContext):
        room = callback.data
        data = await state.get_data()
        selected_rooms = data.get("count_of_rooms", [])
        if room in selected_rooms:
            selected_rooms.remove(room)
        else:
            selected_rooms.append(room)
        await state.update_data(count_of_rooms=selected_rooms)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã:",
            reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms),
        )

    @dp.callback_query(F.data == "room_done")
    async def confirm_rooms(callback: types.CallbackQuery, state: FSMContext):
        await return_to_main_menu(callback, state)

    period_options = ["monthly", "daily", "yearly"]

    @dp.callback_query(F.data == "button_period")
    async def choosing_period(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        selected_periods = data.get("periods", [])
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:",
            reply_markup=get_period_keyboard(selected_periods=selected_periods),
        )
        await state.set_state(Selection.choosing_period)

    @dp.callback_query(F.data.in_(period_options))
    async def confirm_period_choice(callback: types.CallbackQuery, state: FSMContext):
        period = callback.data
        data = await state.get_data()
        selected_periods = data.get("periods", [])

        if period in selected_periods:
            selected_periods.remove(period)
        else:
            selected_periods.append(period)

        await state.update_data(periods=selected_periods)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:", reply_markup=get_period_keyboard(selected_periods)
        )

    @dp.callback_query(F.data == "period_done")
    async def finish_period_selection(callback: types.CallbackQuery, state: FSMContext):
        await return_to_main_menu(callback, state)

    @dp.callback_query(F.data == "button_district")
    async def choosing_district(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        selected_districts = data.get("districts", [])  # ‚úÖ —á–∏—Ç–∞–µ–º –∏–∑ FSM
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã:",
            reply_markup=get_district_keyboard(districts, selected_districts=selected_districts),
        )
        await state.set_state(Selection.choosing_district)

    @dp.callback_query(F.data.in_(districts))
    async def confirm_district(callback: types.CallbackQuery, state: FSMContext):
        district = callback.data
        data = await state.get_data()
        selected_districts = data.get("districts", [])
        if district in selected_districts:
            selected_districts.remove(district)
        else:
            selected_districts.append(district)
        await state.update_data(districts=selected_districts)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
            reply_markup=get_district_keyboard(districts, selected_districts),
        )

    @dp.callback_query(F.data == "district_done")
    async def confirm_districts(callback: types.CallbackQuery, state: FSMContext):
        await return_to_main_menu(callback, state)

    @dp.callback_query(F.data == "back")
    async def go_back(callback: types.CallbackQuery, state: FSMContext):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)

    @dp.callback_query(F.data == "button_delete")
    async def delete_data(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        user_id = data.get("user_id")
        user_name = data.get("user_name")
        selected_message_id = data.get("selected_message_id")
        finish_message_id = data.get("finish_message_id")
        save_count = data.get("save_count", 0)
        selected_text = (
            "–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
            "<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
            "<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
            "<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>"
        )
        message_id = data.get("selected_message_id")
        await state.clear()
        if message_id:
            await bot.edit_message_text(
                selected_text,
                chat_id=callback.message.chat.id,
                message_id=message_id,
                parse_mode="HTML",
            )
            await state.clear()
            await state.update_data(
                user_id=user_id,
                user_name=user_name,
                selected_message_id=selected_message_id,
                finish_message_id=finish_message_id,
                save_count=save_count,
            )

    @dp.callback_query(F.data == "button_save")
    async def save_data(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        districts_selected = data.get("districts", [])
        district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        selected_rooms = data.get("count_of_rooms", [])
        count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        min_price = data.get("min_price", 0)
        max_price = data.get("max_price", 1000000)
        period = data.get("period", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        user_id = data.get("user_id")
        user_name = data.get("user_name")
        save_count = data.get("save_count", 0)
        await add_client(
            user_id,
            min_price,
            max_price,
            count_of_rooms,
            district,
            period,
            user_name,
        )
        await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        save_count += 1
        if save_count == 1:
            message_index = 0
        else:
            message_index = 1 + ((save_count - 2) % 5)
        finish_message_id = data.get("finish_message_id")
        finish_message = finish_messages[message_index]
        try:
            if finish_message_id:
                await bot.edit_message_text(
                    text=finish_message,
                    chat_id=callback.message.chat.id,
                    message_id=finish_message_id,
                    parse_mode="HTML",
                )
            else:
                sent_message = await callback.message.answer(finish_message, parse_mode="HTML")
                await state.update_data(finish_message_id=sent_message.message_id)
            await state.update_data(save_count=save_count)
        except AiogramError as e:
            if "message is not modified" in str(e):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {finish_message}")
            else:
                sent_message = await callback.message.answer(finish_message, parse_mode="HTML")
                await state.update_data(confirmation_message_id=sent_message.message_id)

    async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        districts_selected = data.get("districts", [])
        district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        selected_rooms = data.get("count_of_rooms", [])
        count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        min_price = data.get("min_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        max_price = data.get("max_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        periods = data.get("periods", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
        periods = data.get("periods", [])
        if periods:
            period = ", ".join(period_translations.get(p, p) for p in periods)
        else:
            period = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

        if min_price != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
            selected_text = (
                f"–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
                f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price} </b> - <b>{max_price} AED –≤ –º–µ—Å—è—Ü</b>\n"
                f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
                f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
            )
        else:
            selected_text = (
                f"–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
                f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
                f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price}</b>\n"
                f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
                f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
            )
        message_id = data.get("selected_message_id")
        try:
            if message_id:
                await bot.edit_message_text(
                    selected_text,
                    chat_id=callback.message.chat.id,
                    message_id=message_id,
                    parse_mode="HTML",
                )
            else:
                sent_message = await callback.message.answer(selected_text, parse_mode="HTML")
                await state.update_data(selected_message_id=sent_message.message_id)
        except AiogramError as e:
            if "message is not modified" in str(e):
                print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                raise
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=inline_kb)
