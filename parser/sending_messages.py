from aiogram import Bot
from aiogram.utils.media_group import MediaGroupBuilder
import logging
import asyncio
import aiohttp
from db import async_session, Apartment, find_matching_clients
from dotenv import dotenv_values
from sqlalchemy.sql import select


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
env_values = dotenv_values(".env")
bot = Bot(token=env_values.get("API_TOKEN"))


async def is_url_accessible(url: str) -> bool:
    async with aiohttp.ClientSession() as session:
        try:
            async with session.head(url, timeout=5) as response:
                return response.status == 200
        except Exception:
            return False


def get_photo_urls(photo_ids: list[str], limit: int = 10) -> list[str]:
    return [f"https://images.bayut.com/thumbnails/{pid}-1066x800.webp" for pid in photo_ids[:limit]]


async def send_media_group(
    chat_id: str, photo_urls: list[str], message: str, max_attempts: int = 5
):
    valid_photo_urls = [url for url in photo_urls if await is_url_accessible(url)]
    if not valid_photo_urls:
        logging.error(f"[NOTIFY] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}")
        return False

    for attempt in range(max_attempts):
        try:
            media_group = MediaGroupBuilder(caption=message)
            for url in valid_photo_urls:
                media_group.add_photo(media=url, parse_mode="HTML")
            await bot.send_media_group(chat_id=chat_id, media=media_group.build())
            return True
        except Exception as e:
            if "Too Many Requests" in str(e):
                retry_after = (
                    int(str(e).split("retry after ")[-1].split()[0]) + 1
                    if "retry after" in str(e)
                    else 30
                )
                await asyncio.sleep(retry_after)
            elif "WEBPAGE_CURL_FAILED" in str(e) or "WEBPAGE_MEDIA_EMPTY" in str(e):
                await asyncio.sleep(10)
            else:
                logging.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                return False
        await asyncio.sleep(1)
    return False


async def send_apartment_notification(apartment_id):
    async with async_session() as session:
        apt = (
            (await session.execute(select(Apartment).where(Apartment.id == apartment_id)))
            .scalars()
            .first()
        )
        if not apt:
            logging.error(f"[NOTIFY] –ö–≤–∞—Ä—Ç–∏—Ä–∞ —Å ID {apartment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        furnishing_translations = {
            "furnished": "–ú–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
            "unfurnished": "–ù–µ–º–µ–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è",
        }
        furnishing = furnishing_translations.get(apt.furnishing, apt.furnishing or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        name = apt.name
        price = apt.price
        rooms = apt.rooms
        if rooms == 100 or rooms == "100":
            rooms = "—Å—Ç—É–¥–∏—è"
        district = apt.district
        period = apt.period
        if period == "monthly":
            period = "–ø–æ–º–µ—Å—è—á–Ω–æ"
        elif period == "daily":
            period = "–ø–æ—Å—É—Ç–æ—á–Ω–æ"
        elif period == "yearly":
            period = "–æ—Ç –≥–æ–¥–∞"
        else:
            period = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        furnishing = furnishing
        info = apt.info or "–ù–µ —É–∫–∞–∑–∞–Ω—ã —É–¥–æ–±—Å—Ç–≤–∞"
        link = apt.link
        owner = apt.owner.replace(" ", "_")

        message = (
            f"üè† {name}\n"
            f"üí∞ –¶–µ–Ω–∞ –≤ –º–µ—Å—è—Ü: {price} AED\n"
            f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç—ã: {rooms}\n"
            f"üìç –†–∞–π–æ–Ω: {district}\n"
            f"‚åõ –ü–µ—Ä–∏–æ–¥: {period}\n"
            f"ü™ë {furnishing}\n"
            f"‚ÑπÔ∏è –£–¥–æ–±—Å—Ç–≤–∞: {info}\n"
            f"üîó <a href='{link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>\n"
            f"üìû {owner}"
        )

        channel_id = "@apartDubaiApart"
        photo_urls = get_photo_urls(apt.photo_ids)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª
        if await send_media_group(channel_id, photo_urls, message):
            logging.info(f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –¥–ª—è apartment_id={apartment_id}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
        matching_clients = await find_matching_clients(apt)
        if matching_clients:
            sent_usernames = []
            for user_id, user_name in matching_clients:
                if not user_id:
                    continue
                if await send_media_group(user_id, photo_urls, message):
                    sent_usernames.append(user_name or "–ë–µ–∑ –∏–º–µ–Ω–∏")
            if sent_usernames:
                try:
                    await bot.send_message(
                        chat_id=channel_id,
                        text=f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {', '.join(sent_usernames)}",
                        parse_mode="HTML",
                    )
                    logging.info(
                        f"[NOTIFY] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è apartment_id={apartment_id}"
                    )
                except Exception as e:
                    logging.error(f"[NOTIFY] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        else:
            logging.info(f"[NOTIFY] –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è apartment_id={apartment_id}")
