from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import AiogramError
import asyncio
import logging
from dotenv import dotenv_values
from db import add_client, add_apartment, get_all_users

env_values = dotenv_values(".env")
API_TOKEN = env_values.get("API_TOKEN_CHECK")
ADMIN_ID = int(
    env_values.get("ADMIN_ID")
)  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


districts = [
    "Citywalk",
    "Bluewaters",
    "The Palm Jumeirah",
    "Dubai Marina",
    "Business Bay",
    "Downtown",
    "DIFC",
    "ZAABEL + DHCC",
    "Dubai Media City + Dubai Internet City",
    "JLT",
    "JVC",
    "Meydan: Sobha + Azizi Riviera",
    "Dubai Design District + Al Jaddaf",
    "JVT",
    "Creek Harbour",
    "Dubai Production City + Sport City + Motor City",
    "Al Furjan + Discovery Garden",
    "Al Quoz",
    "Al Barsha + Arjan",
]

rooms = ["—Å—Ç—É–¥–∏—è", "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"]


finish_messages = [
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—ë—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
    "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –û–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
    "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º—ã –∏—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.",
]


class Selection(StatesGroup):
    choosing_min_price = State()
    choosing_max_price = State()
    choosing_count_of_rooms = State()
    choosing_district = State()
    choosing_period = State()
    selected_message_id = State()
    user_id = State()


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ApartmentForm(StatesGroup):
    waiting_for_data = State()
    apartment_data = State()

class BroadcastState(StatesGroup):
    waiting_for_message = State()   


# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–π–æ–Ω", callback_data="button_district")],
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="button_price")],
        [InlineKeyboardButton(text="–ö–æ–º–Ω–∞—Ç—ã", callback_data="button_rooms")],
        [InlineKeyboardButton(text="–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã", callback_data="button_period")],
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="button_save")],
        [InlineKeyboardButton(text="–û—Ç—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="button_delete")],
    ]
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")],
    ],
    resize_keyboard=True,
)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
def get_min_price_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(price), callback_data=f"min_{price}")]
            for price in range(4000, 40000, 2000)
        ]
        + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]],
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è)
def get_max_price_keyboard(min_price):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(price), callback_data=f"max_{price}")]
            for price in range(min_price + 1000, 40000, 1000)
        ]
        + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]],
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç
def get_count_of_rooms_keyboard(rooms, selected_rooms):
    buttons = []
    for room in rooms:
        text = f"‚úÖ {room}" if room in selected_rooms else room
        buttons.append([InlineKeyboardButton(text=text, callback_data=room)])

    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="room_done")])
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
def get_period_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="—Ç–æ–ª—å–∫–æ –ø–æ–º–µ—Å—è—á–Ω–æ", callback_data="–ø–æ–º–µ—Å—è—á–Ω–æ")],
            [
                InlineKeyboardButton(
                    text="–æ—Ç –≥–æ–¥–∞ –∏–ª–∏ –ø–æ–º–µ—Å—è—á–Ω–æ", callback_data="–æ—Ç –≥–æ–¥–∞ –∏–ª–∏ –ø–æ–º–µ—Å—è—á–Ω–æ"
                )
            ],
        ]
        + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]]
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
def get_district_keyboard(districts, selected_districts):
    buttons = []
    for district in districts:
        text = f"‚úÖ {district}" if district in selected_districts else district
        buttons.append([InlineKeyboardButton(text=text, callback_data=district)])

    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="district_done")])
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)



@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã.")



@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message, state: FSMContext):

    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

 
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.set_state(BroadcastState.waiting_for_message)





@dp.message(StateFilter(BroadcastState.waiting_for_message))
async def handle_broadcast_message(message: types.Message, state: FSMContext):

    broadcast_message = message.text
    users = await get_all_users()  

    for user_id in users:
        try:
            await bot.send_message(user_id, broadcast_message)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue  

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish()


@dp.message(Command("add_apartment"))
async def cmd_add_apartment(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –°–¢–†–û–ì–û –ß–ï–†–ï–ó @:\n\n"
        "–ê–≥–µ–Ω—Ç @ –ù–∞–∑–≤–∞–Ω–∏–µ @ –¶–µ–Ω–∞ @ –ø–µ—Ä–∏–æ–¥ @ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è @ –†–∞–π–æ–Ω @ –∫–æ–º–Ω–∞—Ç–Ω–æ—Å—Ç—å \n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        " DBX_real_estate @ –°–¥–∞–µ—Ç—Å—è 2-bedroom –≤ Business Bay!@ 180000@ –æ—Ç –≥–æ–¥–∞@ –¥–µ–ø–æ–∑–∏—Ç - 16.500 AED@ The Pad by Omniyat @ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è \n\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_and_send."
    )
    await state.update_data(file_ids=[], apartment_data=None)
    await state.set_state(ApartmentForm.waiting_for_data)


@dp.message(
    StateFilter(ApartmentForm.waiting_for_data), ~Command(commands=["add_and_send"])
)
async def process_apartment_data(msg: types.Message, state: FSMContext):
    current_data = await state.get_data()
    file_ids = current_data.get("file_ids", [])
    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–µ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    if msg.caption or msg.text:
        if msg.caption: 
            data = [item.strip() for item in msg.caption.split("@")]
        else:
            data = [item.strip() for item in msg.text.split("@")]
        await msg.answer(f"–í—ã –≤–≤–µ–ª–∏: {data}")  
        if len(data) < 6:
            await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –ø–æ–ª—è.")
            return

        if not current_data.get("apartment_data"):
            await state.update_data(apartment_data=data)
            await msg.answer("–î–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            await msg.answer(
                "–î–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —É–∂–µ –≤–≤–µ–¥–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /add_and_send."
            )

    if msg.photo or msg.video:
        file_id = msg.photo[-1].file_id if msg.photo else msg.video.file_id
        file_ids.append(file_id)
        await state.update_data(file_ids=file_ids)
        await msg.answer(
            "–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /add_and_send."
        )


@dp.message(Command("add_and_send"), StateFilter(ApartmentForm.waiting_for_data))
async def cmd_add_and_send(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    apartment_data = current_data.get("apartment_data")
    file_ids = current_data.get("file_ids", [])

    if not apartment_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–æ–¥–ø–∏—Å—å—é.")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    try:
        agent, title, price_str, period, info, district = apartment_data[:6]
        rooms = apartment_data[6] if len(apartment_data) > 6 else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        price = int(price_str)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    apartment_id, matching_clients = await add_apartment(
        agent, title, price, rooms, district, period, info, file_ids
    )
    await message.answer(f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID {apartment_id}.")
    print("matching_clients:", matching_clients)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
    if matching_clients:
        apartment_message = (
            f"üè† {title}\n"
            f"üí∞ –¶–µ–Ω–∞: {price} AED\n"
            f"üõèÔ∏è –ö–æ–º–Ω–∞—Ç—ã: {rooms}\n"
            f"üìç –ê–¥—Ä–µ—Å: {district}\n"
            f"‚åõ –ü–µ—Ä–∏–æ–¥: {period}\n"
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ: {info}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: @{agent}"
        )
        await message.answer(
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º {len(matching_clients)}."
        )

        sent_usernames = []
        
        for user_id, user_name in matching_clients:
            try:
                if user_id is None:
                    print("user_id is None!")  
                else:  
                    if user_name:
                        sent_usernames.append(user_name)
                    else:
                        sent_usernames.append("–ë–µ–∑ –∏–º–µ–Ω–∏")
                    if file_ids:
                        media = []
                        for file_id in file_ids:
                            if file_id.startswith("AgAC") or file_id.startswith("AgAD") :
                                media.append(
                                types.InputMediaPhoto(media=file_id))
                            else:
                                media.append(types.InputMediaVideo(media=file_id))
                        if media:
                            media[0].caption = apartment_message
                        await bot.send_media_group(chat_id=user_id, media=media)

                    else:
                        await bot.send_photo(user_id, apartment_message)

            except AiogramError as e:
                logging.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                )
        if sent_usernames:
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(sent_usernames)}.")
         
    else:
        await message.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    user_name = message.from_user.username
    await state.update_data(user_id=user_id, user_name=user_name)
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É.\n\n‚úÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. \n\nüÜï –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üöÄ",
        reply_markup=main_menu,
    )
 
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
@dp.message(F.text == "–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
async def restart_bot(message: types.Message, state: FSMContext):
    await state.clear()
    await send_welcome(message, state)  # /start


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–¶–µ–Ω–∞"
@dp.callback_query(F.data == "button_price")
async def choose_min_price(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—É \n(AED –≤ –º–µ—Å—è—Ü):",
        reply_markup=get_min_price_keyboard(),
    )
    await state.set_state(Selection.choosing_min_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@dp.callback_query(F.data.startswith("min_"))
async def choose_max_price(callback: types.CallbackQuery, state: FSMContext):
    min_price = int(callback.data.split("_")[1])
    await state.update_data(min_price=min_price)

    await callback.message.edit_text(
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞: {min_price}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–∞—Ç—É:",
        reply_markup=get_max_price_keyboard(min_price),
    )
    await state.set_state(Selection.choosing_max_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@dp.callback_query(F.data.startswith("max_"))
async def confirm_price(callback: types.CallbackQuery, state: FSMContext):
    max_price = int(callback.data.split("_")[1])
    await state.update_data(max_price=max_price)
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
@dp.callback_query(F.data == "button_rooms")
async def choosing_count_of_rooms(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms=[]),
    )
    await state.set_state(Selection.choosing_count_of_rooms)


@dp.callback_query(F.data.in_(rooms))
async def confirm_room_choice(callback: types.CallbackQuery, state: FSMContext):
    room = callback.data
    data = await state.get_data()
    selected_rooms = data.get("count_of_rooms", [])
    if room in selected_rooms:
        selected_rooms.remove(room)
    else:
        selected_rooms.append(room)

    await state.update_data(count_of_rooms=selected_rooms)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã:",
        reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms),
    )


@dp.callback_query(F.data == "room_done")
async def confirm_rooms(callback: types.CallbackQuery, state: FSMContext):
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
@dp.callback_query(F.data == "button_period")
async def choosing_period(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:", reply_markup=get_period_keyboard()
    )
    await state.set_state(Selection.choosing_period)


@dp.callback_query(F.data.in_(["–æ—Ç –≥–æ–¥–∞ –∏–ª–∏ –ø–æ–º–µ—Å—è—á–Ω–æ", "–ø–æ–º–µ—Å—è—á–Ω–æ"]))
async def confirm_period_choice(callback: types.CallbackQuery, state: FSMContext):
    period = callback.data

    await state.update_data(period=period)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {period}")
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@dp.callback_query(F.data == "button_district")
async def choosing_district(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã:",
        reply_markup=get_district_keyboard(districts, selected_districts=[]),
    )
    await state.set_state(Selection.choosing_district)


@dp.callback_query(F.data.in_(districts))
async def confirm_district(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data
    data = await state.get_data()
    selected_districts = data.get("districts", [])

    if district in selected_districts:
        selected_districts.remove(district)
    else:
        selected_districts.append(district)

    await state.update_data(districts=selected_districts)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=get_district_keyboard(districts, selected_districts),
    )


@dp.callback_query(F.data == "district_done")
async def confirm_districts(callback: types.CallbackQuery, state: FSMContext):
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
@dp.callback_query(F.data == "button_delete")
async def delete_data(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    user_name = data.get("user_name")
    selected_message_id = data.get("selected_message_id")
    finish_message_id = data.get("finish_message_id")
    save_count = data.get("save_count", 0)

    selected_text = (
        "–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>"
    )

    message_id = data.get("selected_message_id")
    await state.clear()
    if message_id:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        await bot.edit_message_text(
            selected_text,
            chat_id=callback.message.chat.id,
            message_id=message_id,
            parse_mode="HTML",
        )
        await state.clear()

        await state.update_data(
            user_id=user_id,
            user_name=user_name,
            selected_message_id=selected_message_id,
            finish_message_id=finish_message_id,
            save_count=save_count,
        )
    # await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
@dp.callback_query(F.data == "button_save")
async def save_data(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    districts_selected = data.get("districts", [])
    district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    selected_rooms = data.get("count_of_rooms", [])
    count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    min_price = data.get("min_price", 0)
    max_price = data.get("max_price", 1000000)
    period = data.get("period", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    user_id = data.get("user_id")
    user_name = data.get("user_name")
    save_count = data.get("save_count", 0)
    await add_client(
        user_id,
        min_price,
        max_price,
        count_of_rooms,
        district,
        period,
        user_name,
    )
    await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    save_count += 1

    if save_count == 1:
        message_index = 0
    else:
        message_index = 1 + ((save_count - 2) % 5)

    finish_message_id = data.get("finish_message_id")
    finish_message = finish_messages[message_index]
    try:
        if finish_message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            await bot.edit_message_text(
                text=finish_message,
                chat_id=callback.message.chat.id,
                message_id=finish_message_id,
                parse_mode="HTML",
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            sent_message = await callback.message.answer(
                finish_message, parse_mode="HTML"
            )
            await state.update_data(finish_message_id=sent_message.message_id)
        await state.update_data(save_count=save_count)
    except AiogramError as e:
        if "message is not modified" in str(e):
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {finish_message}")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await callback.message.answer(
                finish_message, parse_mode="HTML"
            )
            await state.update_data(confirmation_message_id=sent_message.message_id)


async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    data = await state.get_data()

    districts_selected = data.get("districts", [])
    district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    selected_rooms = data.get("count_of_rooms", [])
    count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    min_price = data.get("min_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    max_price = data.get("max_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    period = data.get("period", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    if min_price != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
        selected_text = (
            f"–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
            f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price} </b> - <b>{max_price} AED –≤ –º–µ—Å—è—Ü</b>\n"
            f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
            f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
        )
    else:
        selected_text = (
            f"–í—ã–±—Ä–∞–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
            f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price}</b>\n"
            f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
            f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
        )
    message_id = data.get("selected_message_id")
    try:
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            await bot.edit_message_text(
                selected_text,
                chat_id=callback.message.chat.id,
                message_id=message_id,
                parse_mode="HTML",
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            sent_message = await callback.message.answer(
                selected_text, parse_mode="HTML"
            )
            await state.update_data(selected_message_id=sent_message.message_id)

    except AiogramError as e:
        if "message is not modified" in str(e):
            logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=inline_kb)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
