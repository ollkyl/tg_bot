from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
from aiogram.exceptions import AiogramError
import asyncio
import logging
from dotenv import dotenv_values
from db import add_client, add_apartment

env_values = dotenv_values(".env")
API_TOKEN = env_values.get("API_TOKEN")
ADMIN_ID = int(
    env_values.get("ADMIN_ID")
)  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã
class Selection(StatesGroup):
    choosing_min_price = State()
    choosing_max_price = State()
    choosing_count_of_rooms = State()
    choosing_district = State()
    choosing_period = State()
    selected_message_id = State()
    user_id = State()


# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
inline_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–π–æ–Ω", callback_data="button_district")],
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="button_price")],
        [InlineKeyboardButton(text="–ö–æ–º–Ω–∞—Ç—ã", callback_data="button_rooms")],
        [InlineKeyboardButton(text="–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã", callback_data="button_period")],
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="button_save")],
        [InlineKeyboardButton(text="–û—Ç—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="button_delete")],
    ]
)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
def get_min_price_keyboard():
    return InlineKeyboardMarkup(
        row_width=2,  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        inline_keyboard=[
            [InlineKeyboardButton(text=str(price), callback_data=f"min_{price}")]
            for price in range(4000, 40000, 2000)
        ]
        + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]],
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è)
def get_max_price_keyboard(min_price):
    return InlineKeyboardMarkup(
        row_width=2,  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        inline_keyboard=[
            [InlineKeyboardButton(text=str(price), callback_data=f"max_{price}")]
            for price in range(min_price + 1000, 40000, 1000)
        ]
        + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]],
    )


rooms = ["—Å—Ç—É–¥–∏—è", "1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "4-–∫–æ–º–Ω–∞—Ç–Ω–∞—è"]


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–º–Ω–∞—Ç
def get_count_of_rooms_keyboard(rooms, selected_rooms):
    buttons = []
    for room in rooms:
        text = f"‚úÖ {room}" if room in selected_rooms else room
        buttons.append([InlineKeyboardButton(text=text, callback_data=room)])

    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="room_done")])
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞
def get_period_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ø–æ–º–µ—Å—è—á–Ω–æ", callback_data="–ø–æ–º–µ—Å—è—á–Ω–æ")],
            [InlineKeyboardButton(text="–æ—Ç –≥–æ–¥–∞", callback_data="–æ—Ç –≥–æ–¥–∞")],
        ]
        + [[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]]
    )


districts = [
    "Downtown Dubai & Business Bay",
    "DIFC & Za'abeel",
    "Dubai Marina & JBR",
    "Palm Jumeirah & Bluewaters Island",
    "Jumeirah (Jumeirah 1, 2, 3, Al Wasl, Al Safa)",
    "Dubai Media City & Dubai Internet City",
    "Dubai Hills Estate & Al Barsha",
    "JVC & JVT",
    "Arjan & Al Furjan",
    "Discovery Gardens & The Gardens",
    "Dubai Sports City & Motor City",
    "Dubai Production City & Dubai Studio City",
    "Meydan (Sobha Hartland, Azizi Riviera)",
    "Dubai Creek Harbour & Dubai Design District",
    "Dubai South & Emaar South",
    "Damac Hills & Damac Hills 2",
    "Al Jaddaf & Dubai Healthcare City (DHCC)",
    "International City & Dubai Silicon Oasis",
]


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
def get_district_keyboard(districts, selected_districts):
    buttons = []
    for district in districts:
        text = f"‚úÖ {district}" if district in selected_districts else district
        buttons.append([InlineKeyboardButton(text=text, callback_data=district)])

    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="district_done")])
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ApartmentForm(StatesGroup):
    waiting_for_data = State()


@dp.message(Command("add_apartment"))
async def cmd_add_apartment(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–í–ª–∞–¥–µ–ª–µ—Ü, –ù–∞–∑–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞, –ê–¥—Ä–µ—Å, –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –§–æ—Ç–æ (–ø—É—Ç–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, –ø–µ—Ä–≤–∞—è —Ö–∞—Ç–∫–∞,  100000, –æ—Ç –≥–æ–¥–∞, 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è, JVC & JVT, –£—é—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ —Å —Ä–µ–º–æ–Ω—Ç–æ–º "
    )

    @dp.message()
    async def process_apartment_data(msg: types.Message):
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            data = [item.strip() for item in msg.text.split(",")]
            if len(data) < 6:
                await msg.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –ø–æ–ª—è.")
                return

            owner, title, price_str, period, info, district, rooms = data[:7]

            price = int(price_str)

            apartment_id, matching_clients = await add_apartment(
                owner, title, price, rooms, district, period, info
            )
            await msg.answer(f"–ö–≤–∞—Ä—Ç–∏—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID {apartment_id}.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º
            if matching_clients:
                apartment_message = (
                    f"üîî –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!\n"
                    f"üè† {title}\n"
                    f"üí∞ –¶–µ–Ω–∞: {price} AED\n"
                    f"üìç –ê–¥—Ä–µ—Å: {district}\n"
                    f"‚ÑπÔ∏è –ò–Ω—Ñ–æ: {info}"
                )
                for user_id in matching_clients:
                    try:
                        await bot.send_message(user_id, apartment_message)
                    except AiogramError as e:
                        logging.error(
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
                        )
            else:
                await msg.answer("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            await msg.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –∫–≤–∞—Ä—Ç–∏—Ä –≤ –∞—Ä–µ–Ω–¥—É.\n\n‚úÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. \n\nüÜï –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! üöÄ"
    )
    user_id = message.from_user.id
    user_name = message.from_user.username
    await state.update_data(user_id=user_id)
    await state.update_data(user_name=user_name)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ "–¶–µ–Ω–∞"
@dp.callback_query(F.data == "button_price")
async def choose_min_price(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É \n(—Ç—ã—Å—è—á AED –≤ –º–µ—Å—è—Ü):",
        reply_markup=get_min_price_keyboard(),
    )
    await state.set_state(Selection.choosing_min_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@dp.callback_query(F.data.startswith("min_"))
async def choose_max_price(callback: types.CallbackQuery, state: FSMContext):
    min_price = int(callback.data.split("_")[1])
    await state.update_data(min_price=min_price)

    await callback.message.edit_text(
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_price}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:",
        reply_markup=get_max_price_keyboard(min_price),
    )
    await state.set_state(Selection.choosing_max_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
@dp.callback_query(F.data.startswith("max_"))
async def confirm_price(callback: types.CallbackQuery, state: FSMContext):
    max_price = int(callback.data.split("_")[1])
    await state.update_data(max_price=max_price)
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç
@dp.callback_query(F.data == "button_rooms")
async def choosing_count_of_rooms(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:",
        reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms=[]),
    )
    await state.set_state(Selection.choosing_count_of_rooms)


@dp.callback_query(F.data.in_(rooms))
async def confirm_room_choice(callback: types.CallbackQuery, state: FSMContext):
    room = callback.data
    data = await state.get_data()
    selected_rooms = data.get("count_of_rooms", [])
    if room in selected_rooms:
        selected_rooms.remove(room)
    else:
        selected_rooms.append(room)

    await state.update_data(count_of_rooms=selected_rooms)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—ã:",
        reply_markup=get_count_of_rooms_keyboard(rooms, selected_rooms),
    )


@dp.callback_query(F.data == "room_done")
async def confirm_rooms(callback: types.CallbackQuery, state: FSMContext):
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞


@dp.callback_query(F.data == "button_period")
async def choosing_period(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:", reply_markup=get_period_keyboard()
    )
    await state.set_state(Selection.choosing_period)


@dp.callback_query(F.data.in_(["–æ—Ç –≥–æ–¥–∞", "–ø–æ–º–µ—Å—è—á–Ω–æ"]))
async def confirm_period_choice(callback: types.CallbackQuery, state: FSMContext):
    period = callback.data

    await state.update_data(period=period)
    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {period}")

    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@dp.callback_query(F.data == "button_district")
async def choosing_district(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã:",
        reply_markup=get_district_keyboard(districts, selected_districts=[]),
    )
    await state.set_state(Selection.choosing_district)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞
@dp.callback_query(F.data.in_(districts))  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
async def confirm_district(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data
    data = await state.get_data()
    selected_districts = data.get("districts", [])

    if district in selected_districts:
        selected_districts.remove(district)  # –£–±–∏—Ä–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–æ
    else:
        selected_districts.append(district)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

    await state.update_data(districts=selected_districts)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=get_district_keyboard(districts, selected_districts),
    )


@dp.callback_query(F.data == "district_done")
async def confirm_districts(callback: types.CallbackQuery, state: FSMContext):
    await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:", reply_markup=inline_kb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
@dp.callback_query(F.data == "button_delete")
async def delete_data(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    user_name = data.get("user_name")
    selected_message_id = data.get("selected_message_id")
    finish_message_id = data.get("finish_message_id")
    save_count = data.get("save_count", 0)

    selected_text = (
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>\n"
        "<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>–ù–µ –≤—ã–±—Ä–∞–Ω–æ</b>"
    )

    message_id = data.get("selected_message_id")
    await state.clear()
    if message_id:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        await bot.edit_message_text(
            selected_text,
            chat_id=callback.message.chat.id,
            message_id=message_id,
            parse_mode="HTML",
        )
        await state.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ user_id –∏ user_name, td
        await state.update_data(
            user_id=user_id,
            user_name=user_name,
            selected_message_id=selected_message_id,
            finish_message_id=finish_message_id,
            save_count=save_count,
        )
    # await return_to_main_menu(callback, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
@dp.callback_query(F.data == "button_save")
async def save_data(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    districts_selected = data.get("districts", [])
    district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    selected_rooms = data.get("count_of_rooms", [])
    count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    min_price = data.get("min_price", None)
    max_price = data.get("max_price", None)
    period = data.get("period", "–ù–µ –≤—ã–±—Ä–∞–Ω–Ω–æ")
    user_id = data.get("user_id")
    user_name = data.get("user_name")
    save_count = data.get("save_count", 0)
    await add_client(
        user_id,
        min_price,
        max_price,
        count_of_rooms,
        district,
        period,
        user_name,
    )
    await callback.answer("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    finish_messages = [
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—ë—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.",
        "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –û–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.",
        "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –æ –Ω–æ–≤—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
        "–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º—ã –∏—â–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∏ —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.",
    ]

    save_count += 1

    if save_count == 1:
        message_index = 0
    else:
        message_index = 1 + ((save_count - 2) % 5)

    finish_message_id = data.get("finish_message_id")
    finish_message = finish_messages[message_index]
    try:
        if finish_message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            await bot.edit_message_text(
                text=finish_message,
                chat_id=callback.message.chat.id,
                message_id=finish_message_id,
                parse_mode="HTML",
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            sent_message = await callback.message.answer(
                finish_message, parse_mode="HTML"
            )
            await state.update_data(finish_message_id=sent_message.message_id)
        await state.update_data(save_count=save_count)
    except AiogramError as e:
        if "message is not modified" in str(e):
            # –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {finish_message}")
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ Telegram, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logging.error(f"–û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            sent_message = await callback.message.answer(
                finish_message, parse_mode="HTML"
            )
            await state.update_data(confirmation_message_id=sent_message.message_id)


async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    data = await state.get_data()

    districts_selected = data.get("districts", [])
    district = ", ".join(districts_selected) if districts_selected else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    selected_rooms = data.get("count_of_rooms", [])
    count_of_rooms = ", ".join(selected_rooms) if selected_rooms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"

    min_price = data.get("min_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    max_price = data.get("max_price", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    period = data.get("period", "–ù–µ –≤—ã–±—Ä–∞–Ω–Ω–æ")
    if min_price != "–ù–µ –≤—ã–±—Ä–∞–Ω–æ":
        selected_text = (
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
            f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price} k </b> - <b>{max_price} k AED </b>\n"
            f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
            f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
        )
    else:
        selected_text = (
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            f"<code>üè† –†–∞–π–æ–Ω—ã:</code> <b>{district}</b>\n"
            f"<code>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã:</code> <b>{min_price}</b>\n"
            f"<code>üõè –ö–æ–º–Ω–∞—Ç—ã:</code> <b>{count_of_rooms}</b>\n"
            f"<code>üìÜ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</code> <b>{period}</b>"
        )
    message_id = data.get("selected_message_id")
    try:
        if message_id:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            await bot.edit_message_text(
                selected_text,
                chat_id=callback.message.chat.id,
                message_id=message_id,
                parse_mode="HTML",
            )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
            sent_message = await callback.message.answer(
                selected_text, parse_mode="HTML"
            )
            await state.update_data(selected_message_id=sent_message.message_id)

    except AiogramError as e:
        if "message is not modified" in str(e):
            logging.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:", reply_markup=inline_kb)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
